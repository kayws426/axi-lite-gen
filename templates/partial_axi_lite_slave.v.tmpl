// {{attribution}}
// GEN_TIME = {{now}}
// GEN_USER = {{whoami}}
// MODULE = {{name}}

`timescale 1 ns / 1 ps

module axi_lite_slave_{{name}} #
    (
{% if parameters|length > 0 %}
    //// Generate-time parameters:
    {% for param in parameters %}
    parameter {{ param.ppslug() }} = {{ param.ppdefault() }},
    {% endfor %}

{% endif %}
{% if registers|length > 0 %}
    //// Register Default Parameters
    {% for reg in registers %}
    parameter DEFAULT_{{ reg.slug.upper() }} = {{ reg.ppdefault() }},
    {% endfor %}

{% endif %}
    //// Parameters of Axi Slave Bus Interface S_AXI
    parameter C_S_AXI_DATA_WIDTH = {{C_S_AXI_DATA_WIDTH}},
    parameter C_S_AXI_ADDR_WIDTH = {{C_S_AXI_ADDR_WIDTH}},
    parameter C_S_AXI_ADDR_MSB = {{C_S_AXI_ADDR_MSB}},
    parameter C_S_AXI_ADDR_LSB = {{C_S_AXI_ADDR_LSB}}
    )
    (
    //// AXI I/O Signals
    input wire s_axi_aresetn,
    input wire [C_S_AXI_ADDR_WIDTH-1:0] s_axi_awaddr,
    input wire [2:0] s_axi_awprot,
    input wire s_axi_awvalid,
    output wire s_axi_awready,
    input wire [C_S_AXI_DATA_WIDTH-1:0] s_axi_wdata,
    input wire [C_S_AXI_DATA_WIDTH/8-1:0] s_axi_wstrb,
    input wire s_axi_wvalid,
    output wire s_axi_wready,
    output wire [1:0] s_axi_bresp,
    output wire s_axi_bvalid,
    input wire s_axi_bready,
    input wire [C_S_AXI_ADDR_WIDTH-1:0] s_axi_araddr,
    input wire [2:0] s_axi_arprot,
    input wire s_axi_arvalid,
    output wire s_axi_arready,
    output wire [C_S_AXI_DATA_WIDTH-1:0] s_axi_rdata,
    output wire [1:0] s_axi_rresp,
    output wire s_axi_rvalid,
    input wire s_axi_rready,
{% if registers|length > 0 %}
    //// {{ name }} register values
{% for reg in registers %}
    {%+ if reg.write %}output reg{% else %}input wire{% endif %} {{ reg.pphdlwidth() }}{{ reg.slug }},
{% endfor %}
{% endif %}
    // s_axi_aclk is last to ensure no trailing comma
    input wire s_axi_aclk
);

//// Memory Mapped Register Initialization
initial begin
{% for reg in registers %}
{% if reg.write %}
    {{ reg.slug }} = DEFAULT_{{ reg.slug.upper() }};
{% endif %}
{% endfor %}
end

//// AXI Internals
// TODO:
wire slv_reg_wren;
wire slv_reg_rden;
reg [C_S_AXI_DATA_WIDTH-1:0] reg_data_out;
reg [C_S_AXI_DATA_WIDTH-1:0] axi_wdata;

{# this would be for duplicated sections
genvar k;
generate
for (k = 1; k < 8; k = k + 1) begin: kblock
    initial begin
        afg_wavetable_select[k] <= 0;
    end
end
endgenerate
#}

reg axi_awready;
reg axi_wready;
reg [1:0] axi_bresp;
reg axi_bvalid;
reg axi_arready;
reg [1:0] axi_rresp;
reg axi_rvalid;

assign s_axi_awready = axi_awready;
assign s_axi_wready = axi_wready;
assign s_axi_bresp = axi_bresp;
assign s_axi_bvalid = axi_bvalid;
assign s_axi_arready = axi_arready;
assign s_axi_rdata = reg_data_out;
assign s_axi_rresp = axi_rresp;
assign s_axi_rvalid = axi_rvalid;

// This block handles writes
assign slv_reg_wren = s_axi_wready && s_axi_wvalid && s_axi_awready && s_axi_awvalid;
always @(posedge s_axi_aclk) begin
    if (s_axi_aresetn == 1'b0) begin
{% for reg in registers %}
{% if reg.write %}
        {{ reg.slug }} <= DEFAULT_{{ reg.slug.upper() }};
{% endif %}
{% endfor %}
    end else begin
        if (slv_reg_wren) begin
            casex (s_axi_awaddr[C_S_AXI_ADDR_MSB:C_S_AXI_ADDR_LSB])
{% for reg in registers %}
{% if reg.write %}
{% for word in reg.word_list() %}
            {{C_S_AXI_ADDR_MSB-C_S_AXI_ADDR_LSB+1}}'d{{ word.index }}: begin // byte_offset: {{C_S_AXI_ADDR_MSB-C_S_AXI_ADDR_LSB+1}}'h{{ word.byte_offset_hex }}
                {{ reg.slug }}{{ word.span }} <= s_axi_wdata{{ word.wdata_bus_span }};
            end
{% endfor %}
{% endif %}
{% endfor %}
            default: begin
                // pass
            end
            endcase
        end else begin
            // TODO: doorbells
        end
    end
end

// This block handles reads
assign slv_reg_rden = s_axi_arready & s_axi_arvalid & ~s_axi_rvalid;
always @(posedge s_axi_aclk) begin
    if (s_axi_aresetn == 1'b0) begin
        reg_data_out <= 0;
    end else if (slv_reg_rden) begin
        // Read address mux
        casex ( s_axi_araddr[C_S_AXI_ADDR_MSB:C_S_AXI_ADDR_LSB] )
{% for reg in registers %}
{% if reg.read %}
{% for word in reg.word_list() %}
        {{C_S_AXI_ADDR_MSB-C_S_AXI_ADDR_LSB+1}}'d{{ word.index }}: begin // byte_offset: {{C_S_AXI_ADDR_MSB-C_S_AXI_ADDR_LSB+1}}'h{{ word.byte_offset_hex }}
            reg_data_out <= {{ word.rdata_full_width }};
        end
{% endfor %}
{% endif %}
{% endfor %}
        default: begin
            // pass
        end
        endcase
    end
end

{# this would be for MEMORY blocks
always @(posedge s_axi_aclk) begin
    if (slv_reg_wren) begin
        memory_addr <= s_axi_awaddr[13:2];
    end else begin
        wavetables_addr <= s_axi_araddr[13:2];
    end
end
#}

// Implement axi_awready generation
always @( posedge s_axi_aclk ) begin
    if ( s_axi_aresetn == 1'b0 ) begin
        axi_awready <= 1'b0;
    end else begin
        if (~axi_awready && s_axi_awvalid && s_axi_wvalid) begin
            // slave is ready to accept write address when
            // there is a valid write address and write data
            // on the write address and data bus. This design
            // expects no outstanding transactions.
            axi_awready <= 1'b1;
        end else begin
            axi_awready <= 1'b0;
        end
    end
end

// // Implement axi_awaddr latching
// always @( posedge s_axi_aclk ) begin
//     if ( s_axi_aresetn == 1'b0 ) begin
//         axi_awaddr <= 0;
//     end else begin
//         if (~s_axi_awready && s_axi_awvalid && s_axi_wvalid) begin
//             // Write Address latching
//             axi_awaddr <= s_axi_awaddr;
//         end
//     end
// end

// Implement axi_wready generation
always @( posedge s_axi_aclk ) begin
    if ( s_axi_aresetn == 1'b0 ) begin
        axi_wready <= 1'b0;
    end else begin
        if (~axi_wready && s_axi_wvalid && s_axi_awvalid) begin
            // slave is ready to accept write data when
            // there is a valid write address and write data
            // on the write address and data bus. This design
            // expects no outstanding transactions.
            axi_wready <= 1'b1;
        end else begin
            axi_wready <= 1'b0;
        end
    end
end

// Implement write response logic generation
always @( posedge s_axi_aclk ) begin
    if ( s_axi_aresetn == 1'b0 ) begin
        axi_bvalid <= 0;
        axi_bresp  <= 2'b0;
    end else begin
        if (s_axi_awready && s_axi_awvalid && ~axi_bvalid && s_axi_wready && s_axi_wvalid) begin
            // indicates a valid write response is available
            axi_bvalid <= 1'b1;
            axi_bresp  <= 2'b0; // 'OKAY' response
            // work error responses in future
        end else begin
            if (s_axi_bready && axi_bvalid) begin
                //check if bready is asserted while bvalid is high)
                //(there is a possibility that bready is always asserted high)
                axi_bvalid <= 1'b0;
            end
        end
    end
end

// Implement axi_arready generation
always @( posedge s_axi_aclk ) begin
    if ( s_axi_aresetn == 1'b0 ) begin
        axi_arready <= 1'b0;
        // axi_araddr  <= 32'b0;
    end else begin
        if (~axi_arready && s_axi_arvalid) begin
            // indicates that the slave has acceped the valid read address
            axi_arready <= 1'b1;
            // Read address latching
            // axi_araddr  <= s_axi_araddr;
        end else begin
            axi_arready <= 1'b0;
        end
    end
end

// Implement s_axi_rvalid generation
always @( posedge s_axi_aclk ) begin
    if ( s_axi_aresetn == 1'b0 ) begin
        axi_rvalid <= 1'b0;
        axi_rresp <= 2'b0;
    end else begin
        if (s_axi_arready && s_axi_arvalid && ~axi_rvalid) begin
            axi_rvalid <= 1'b1;
            axi_rresp  <= 2'b0; // 'OKAY' response
        end else if (axi_rvalid && s_axi_rready) begin
            axi_rvalid <= 2'b0;
        end
    end
end

endmodule

